// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vAYiSicYDrDS7LFYWXCcuj
// Component: fhS8WDgavC3j

import * as React from 'react'

import Head from 'next/head'
import Link, { LinkProps } from 'next/link'
import { useRouter } from 'next/router'

import * as p from '@plasmicapp/react-web'
import * as ph from '@plasmicapp/react-web/lib/host'

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web'
import { Trans } from '@lingui/macro' // plasmic-import: 8ktXDPBUyl/codeComponent
import MiniCard from '../../components/MiniCard' // plasmic-import: vO_4Kqwfol/component
import Button from '../../components/Button' // plasmic-import: iJXCSr6ruh/component

import { LocaleValue, useLocale } from './PlasmicGlobalVariant__Locale' // plasmic-import: 0HcufhJ79T/globalVariant
import { useScreenVariants as useScreenVariantsl0JmZnrVEo25 } from './PlasmicGlobalVariant__Screen' // plasmic-import: l0JmZnrVEo-25/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css'

import projectcss from './plasmic_kalm_chat.module.css' // plasmic-import: vAYiSicYDrDS7LFYWXCcuj/projectcss
import sty from './PlasmicHomepage.module.css' // plasmic-import: fhS8WDgavC3j/css

import VectorIcon from './icons/PlasmicIcon__Vector' // plasmic-import: 6SW_Etwy-i/icon
import kalmopngWhgWeH5BJ from './images/kalmopng.png' // plasmic-import: WHGWeH5bJ/picture
import verticalContainerGGxb0UiBEc from './images/verticalContainer.svg' // plasmic-import: gGXB0uiBEc/picture
import verticalContainer2NFrI00Puid from './images/verticalContainer2.svg' // plasmic-import: nFrI00PUID/picture

export type PlasmicHomepage__VariantMembers = {}
export type PlasmicHomepage__VariantsArgs = {}
type VariantPropType = keyof PlasmicHomepage__VariantsArgs
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>()

export type PlasmicHomepage__ArgsType = {
  postback?: (event: string) => void
}
type ArgPropType = keyof PlasmicHomepage__ArgsType
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>('postback')

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<'div'>
  localeSelector?: p.Flex<'a'> & Partial<LinkProps>
  page?: p.Flex<'div'>
  navigation?: p.Flex<'div'>
  img?: p.Flex<typeof p.PlasmicImg>
  name?: p.Flex<'div'>
  main?: p.Flex<'div'>
  card?: p.Flex<'div'>
  header?: p.Flex<'div'>
  linguiTrans?: p.Flex<typeof Trans>
  sofaIllustration?: p.Flex<'div'>
  columns?: p.Flex<'div'>
  availability?: p.Flex<'div'>
  discord?: p.Flex<'svg'>
  telegram?: p.Flex<typeof p.PlasmicImg>
  whatsapp?: p.Flex<typeof p.PlasmicImg>
  verticalContainer?: p.Flex<'div'>
  expert?: p.Flex<typeof MiniCard>
  fuss?: p.Flex<typeof MiniCard>
  unbeatable?: p.Flex<typeof MiniCard>
  ul?: p.Flex<'ul'>
  actions?: p.Flex<'div'>
}

export interface DefaultHomepageProps {}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn())
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise
  })

function useNextRouter() {
  try {
    return useRouter()
  } catch {}
  return undefined
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs
  args: PlasmicHomepage__ArgsType
  overrides: PlasmicHomepage__OverridesType
  forNode?: string
}) {
  const { variants, overrides, forNode } = props
  const __nextRouter = useNextRouter()

  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])

  const $props = {
    ...args,
    ...variants,
  }
  const refsRef = React.useRef({})
  const $refs = refsRef.current

  const currentUser = p.useCurrentUser?.() || {}
  const [$queries, setDollarQueries] = React.useState({})

  const globalVariants = ensureGlobalVariants({
    locale: useLocale(),
    screen: useScreenVariantsl0JmZnrVEo25(),
  })

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta key="og:title" property="og:title" content={PlasmicHomepage.pageMetadata.title} />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            { [sty.rootglobal_locale_ptBr]: hasVariant(globalVariants, 'locale', 'ptBr') }
          )}
        >
          {true ? (
            <p.Stack
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uLzq)}
            >
              <div className={classNames(projectcss.all, projectcss.__wab_text, sty.text__yz5Cv)}>
                {'Choose your language:'}
              </div>
              <p.PlasmicLink
                data-plasmic-name={'localeSelector'}
                data-plasmic-override={overrides.localeSelector}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.localeSelector
                )}
                component={Link}
                href={'/en-US' as const}
                platform={'nextjs'}
              >
                {'üåê English'}
              </p.PlasmicLink>
            </p.Stack>
          ) : null}
          <div
            data-plasmic-name={'page'}
            data-plasmic-override={overrides.page}
            className={classNames(projectcss.all, sty.page)}
          >
            <div
              data-plasmic-name={'navigation'}
              data-plasmic-override={overrides.navigation}
              className={classNames(projectcss.all, sty.navigation)}
            >
              {true ? (
                <p.Stack
                  as={'div'}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fbiIr)}
                >
                  <p.PlasmicImg
                    data-plasmic-name={'img'}
                    data-plasmic-override={overrides.img}
                    alt={''}
                    className={classNames(sty.img)}
                    displayHeight={'41px' as const}
                    displayMaxHeight={'none' as const}
                    displayMaxWidth={'100%' as const}
                    displayMinHeight={'0' as const}
                    displayMinWidth={'0' as const}
                    displayWidth={'auto' as const}
                    loading={'lazy' as const}
                    src={{
                      src: kalmopngWhgWeH5BJ,
                      fullWidth: 650,
                      fullHeight: 546,
                      aspectRatio: undefined,
                    }}
                  />

                  {true ? (
                    <p.Stack
                      as={'div'}
                      data-plasmic-name={'name'}
                      data-plasmic-override={overrides.name}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.name)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ivWqW
                        )}
                      >
                        {'Kalm'}
                      </div>
                      {true ? (
                        <div className={classNames(projectcss.all, sty.freeBox__agJu7)}>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nJta4
                            )}
                          >
                            {'.chat'}
                          </div>
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
            {true ? (
              <div
                data-plasmic-name={'main'}
                data-plasmic-override={overrides.main}
                className={classNames(projectcss.all, sty.main)}
              >
                <div
                  data-plasmic-name={'card'}
                  data-plasmic-override={overrides.card}
                  className={classNames(projectcss.all, sty.card)}
                >
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'header'}
                    data-plasmic-override={overrides.header}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yoplm,
                        {
                          [sty.textglobal_locale_ptBr__yoplmFrFuA]: hasVariant(
                            globalVariants,
                            'locale',
                            'ptBr'
                          ),
                        }
                      )}
                    >
                      {'Overcome your challenges'}
                    </div>
                    <Trans
                      data-plasmic-name={'linguiTrans'}
                      data-plasmic-override={overrides.linguiTrans}
                      className={classNames('__wab_instance', sty.linguiTrans)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s4UVn,
                          {
                            [sty.textglobal_locale_ptBr__s4UVnFrFuA]: hasVariant(
                              globalVariants,
                              'locale',
                              'ptBr'
                            ),
                          }
                        )}
                      >
                        {'Overcome your challenges'}
                      </div>
                    </Trans>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9JMbW
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{'Get qualified help and counseling '}</React.Fragment>
                        <span
                          className={'plasmic_default__all plasmic_default__span'}
                          style={{ textDecorationLine: 'underline' }}
                        >
                          {'instantly'}
                        </span>
                        <React.Fragment>
                          {', directly on Whatsapp. The help you need always at your pocket. '}
                        </React.Fragment>
                        <span
                          className={'plasmic_default__all plasmic_default__span'}
                          style={{ fontWeight: 700 }}
                        >
                          {'All for FREE'}
                        </span>
                        <React.Fragment>{''}</React.Fragment>
                        <span
                          className={'plasmic_default__all plasmic_default__span'}
                          style={{ fontWeight: 700 }}
                        >
                          {' !'}
                        </span>
                      </React.Fragment>
                    </div>
                  </p.Stack>
                  <div
                    data-plasmic-name={'sofaIllustration'}
                    data-plasmic-override={overrides.sofaIllustration}
                    className={classNames(projectcss.all, sty.sofaIllustration)}
                  />

                  <div
                    data-plasmic-name={'columns'}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div className={classNames(projectcss.all, sty.column__yFvy0)}>
                      <p.Stack
                        as={'div'}
                        data-plasmic-name={'availability'}
                        data-plasmic-override={overrides.availability}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.availability)}
                      >
                        <p.Stack
                          as={'div'}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.freeBox___58SBf)}
                        >
                          <p.PlasmicLink
                            className={classNames(projectcss.all, projectcss.a, sty.link__od6Rs)}
                            component={Link}
                            href={
                              'https://discord.com/api/oauth2/authorize?client_id=1090721851161976852&permissions=274877959168&redirect_uri=https%3A%2F%2Fdiscord.events.stdlib.com%2Fdiscord%2Fauth%2F&scope=bot' as const
                            }
                            onClick={async (event) => {
                              const $steps = {}
                              $steps['invokePostback'] = true
                                ? (() => {
                                    const actionArgs = {
                                      eventRef: __wrapUserFunction(
                                        {
                                          type: 'InteractionArgLoc',
                                          actionName: 'invokeEventHandler',
                                          interactionUuid: 'n3Owgv6HD',
                                          componentUuid: 'fhS8WDgavC3j',
                                          argName: 'eventRef',
                                        },
                                        () => $props['postback']
                                      ),
                                      args: __wrapUserFunction(
                                        {
                                          type: 'InteractionArgLoc',
                                          actionName: 'invokeEventHandler',
                                          interactionUuid: 'n3Owgv6HD',
                                          componentUuid: 'fhS8WDgavC3j',
                                          argName: 'args',
                                        },
                                        () => ['initiateTakeoff']
                                      ),
                                    }
                                    return __wrapUserFunction(
                                      {
                                        type: 'InteractionLoc',
                                        actionName: 'invokeEventHandler',
                                        interactionUuid: 'n3Owgv6HD',
                                        componentUuid: 'fhS8WDgavC3j',
                                      },
                                      () =>
                                        (({ eventRef, args }) => {
                                          return eventRef?.(...(args ?? []))
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    )
                                  })()
                                : undefined
                              if (
                                typeof $steps['invokePostback'] === 'object' &&
                                typeof $steps['invokePostback'].then === 'function'
                              ) {
                                $steps['invokePostback'] = await __wrapUserPromise(
                                  {
                                    type: 'InteractionLoc',
                                    actionName: 'invokeEventHandler',
                                    interactionUuid: 'n3Owgv6HD',
                                    componentUuid: 'fhS8WDgavC3j',
                                  },
                                  $steps['invokePostback']
                                )
                              }
                            }}
                            platform={'nextjs'}
                            target={'_blank' as const}
                          >
                            <VectorIcon
                              data-plasmic-name={'discord'}
                              data-plasmic-override={overrides.discord}
                              className={classNames(projectcss.all, sty.discord)}
                              role={'img'}
                            />
                          </p.PlasmicLink>
                          {true ? (
                            <p.PlasmicLink
                              className={classNames(projectcss.all, projectcss.a, sty.link__fpH03)}
                              component={Link}
                              platform={'nextjs'}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={'telegram'}
                                data-plasmic-override={overrides.telegram}
                                alt={''}
                                className={classNames(sty.telegram)}
                                displayHeight={'36px' as const}
                                displayMaxHeight={'none' as const}
                                displayMaxWidth={'100%' as const}
                                displayMinHeight={'0' as const}
                                displayMinWidth={'0' as const}
                                displayWidth={'36px' as const}
                                loading={'lazy' as const}
                                src={{
                                  src: verticalContainerGGxb0UiBEc,
                                  fullWidth: 36,
                                  fullHeight: 36,
                                  aspectRatio: 1,
                                }}
                              />
                            </p.PlasmicLink>
                          ) : null}
                          <p.PlasmicLink
                            className={classNames(projectcss.all, projectcss.a, sty.link__gCkDd)}
                            component={Link}
                            href={
                              'https://wa.me/5548933001624?text=Hi%20Nina!%20What%20can%20you%20help%20me%20with?' as const
                            }
                            onClick={async (event) => {
                              const $steps = {}
                              $steps['invokePostback'] = true
                                ? (() => {
                                    const actionArgs = {
                                      eventRef: __wrapUserFunction(
                                        {
                                          type: 'InteractionArgLoc',
                                          actionName: 'invokeEventHandler',
                                          interactionUuid: 'C0zuToMud',
                                          componentUuid: 'fhS8WDgavC3j',
                                          argName: 'eventRef',
                                        },
                                        () => $props['postback']
                                      ),
                                      args: __wrapUserFunction(
                                        {
                                          type: 'InteractionArgLoc',
                                          actionName: 'invokeEventHandler',
                                          interactionUuid: 'C0zuToMud',
                                          componentUuid: 'fhS8WDgavC3j',
                                          argName: 'args',
                                        },
                                        () => ['initiateTakeoff']
                                      ),
                                    }
                                    return __wrapUserFunction(
                                      {
                                        type: 'InteractionLoc',
                                        actionName: 'invokeEventHandler',
                                        interactionUuid: 'C0zuToMud',
                                        componentUuid: 'fhS8WDgavC3j',
                                      },
                                      () =>
                                        (({ eventRef, args }) => {
                                          return eventRef?.(...(args ?? []))
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    )
                                  })()
                                : undefined
                              if (
                                typeof $steps['invokePostback'] === 'object' &&
                                typeof $steps['invokePostback'].then === 'function'
                              ) {
                                $steps['invokePostback'] = await __wrapUserPromise(
                                  {
                                    type: 'InteractionLoc',
                                    actionName: 'invokeEventHandler',
                                    interactionUuid: 'C0zuToMud',
                                    componentUuid: 'fhS8WDgavC3j',
                                  },
                                  $steps['invokePostback']
                                )
                              }
                            }}
                            platform={'nextjs'}
                            target={'_blank' as const}
                          >
                            <p.PlasmicImg
                              data-plasmic-name={'whatsapp'}
                              data-plasmic-override={overrides.whatsapp}
                              alt={''}
                              className={classNames(sty.whatsapp)}
                              displayHeight={
                                hasVariant(globalVariants, 'screen', 'mobileOnly')
                                  ? ('60px' as const)
                                  : ('36px' as const)
                              }
                              displayMaxHeight={'none' as const}
                              displayMaxWidth={'100%' as const}
                              displayMinHeight={'0' as const}
                              displayMinWidth={'0' as const}
                              displayWidth={
                                hasVariant(globalVariants, 'screen', 'mobileOnly')
                                  ? ('60px' as const)
                                  : ('35.944px' as const)
                              }
                              loading={'lazy' as const}
                              src={{
                                src: verticalContainer2NFrI00Puid,
                                fullWidth: 35.944,
                                fullHeight: 36,
                                aspectRatio: 1,
                              }}
                            />
                          </p.PlasmicLink>
                        </p.Stack>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__olLbE
                          )}
                        >
                          {'Available on'}
                        </div>
                      </p.Stack>
                    </div>
                    <div className={classNames(projectcss.all, sty.column__kLVpX)}>
                      <p.Stack
                        as={'div'}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox__aaVdS)}
                      >
                        <p.Stack
                          as={'div'}
                          data-plasmic-name={'verticalContainer'}
                          data-plasmic-override={overrides.verticalContainer}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.verticalContainer)}
                        >
                          <MiniCard
                            data-plasmic-name={'expert'}
                            data-plasmic-override={overrides.expert}
                            className={classNames('__wab_instance', sty.expert)}
                          >
                            {
                              'From personal therapy to relationship counseling. Each counselor is trained to provide compassionate and effective guidance for you.'
                            }
                          </MiniCard>
                          <MiniCard
                            data-plasmic-name={'fuss'}
                            data-plasmic-override={overrides.fuss}
                            className={classNames('__wab_instance', sty.fuss)}
                            title={'No Fuss'}
                          >
                            {
                              'Forget about pre-screening and scheduling of calls. Save time with our clear-cut approach.'
                            }
                          </MiniCard>
                          <MiniCard
                            data-plasmic-name={'unbeatable'}
                            data-plasmic-override={overrides.unbeatable}
                            className={classNames('__wab_instance', sty.unbeatable)}
                            title={'Unbeatable Quality'}
                            type={'action' as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w9HFv
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{''}</React.Fragment>
                                {
                                  <ul
                                    data-plasmic-name={'ul'}
                                    data-plasmic-override={overrides.ul}
                                    className={classNames(projectcss.all, projectcss.ul, sty.ul)}
                                  >
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__e6Y37
                                      )}
                                    >
                                      {'24/7 access, instant replies'}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__c0OqF
                                      )}
                                    >
                                      {'Personalized counseling\n'}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__uA2H3
                                      )}
                                    >
                                      {'Convenient and private'}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__ehMaH
                                      )}
                                    >
                                      {'Super affordable pricing (+ FREE forever plan)'}
                                    </li>
                                  </ul>
                                }
                                <React.Fragment>{''}</React.Fragment>
                              </React.Fragment>
                            </div>
                          </MiniCard>
                        </p.Stack>
                        <p.Stack
                          as={'div'}
                          data-plasmic-name={'actions'}
                          data-plasmic-override={overrides.actions}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.actions)}
                        >
                          {true ? (
                            <Button
                              className={classNames('__wab_instance', sty.button___3XBEi)}
                              ghost={true}
                            >
                              {'Choose a Therapist'}
                            </Button>
                          ) : null}
                          <p.PlasmicLink
                            className={classNames(projectcss.all, projectcss.a, sty.link__o3P3W)}
                            component={Link}
                            href={
                              'https://wa.me/5548933001624?text=Hi%20Nina!%20What%20can%20you%20help%20me%20with?' as const
                            }
                            onClick={async (event) => {
                              const $steps = {}
                              $steps['invokePostback'] = true
                                ? (() => {
                                    const actionArgs = {
                                      eventRef: __wrapUserFunction(
                                        {
                                          type: 'InteractionArgLoc',
                                          actionName: 'invokeEventHandler',
                                          interactionUuid: '-J1E9u7Az',
                                          componentUuid: 'fhS8WDgavC3j',
                                          argName: 'eventRef',
                                        },
                                        () => $props['postback']
                                      ),
                                      args: __wrapUserFunction(
                                        {
                                          type: 'InteractionArgLoc',
                                          actionName: 'invokeEventHandler',
                                          interactionUuid: '-J1E9u7Az',
                                          componentUuid: 'fhS8WDgavC3j',
                                          argName: 'args',
                                        },
                                        () => ['initiateTakeoff']
                                      ),
                                    }
                                    return __wrapUserFunction(
                                      {
                                        type: 'InteractionLoc',
                                        actionName: 'invokeEventHandler',
                                        interactionUuid: '-J1E9u7Az',
                                        componentUuid: 'fhS8WDgavC3j',
                                      },
                                      () =>
                                        (({ eventRef, args }) => {
                                          return eventRef?.(...(args ?? []))
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    )
                                  })()
                                : undefined
                              if (
                                typeof $steps['invokePostback'] === 'object' &&
                                typeof $steps['invokePostback'].then === 'function'
                              ) {
                                $steps['invokePostback'] = await __wrapUserPromise(
                                  {
                                    type: 'InteractionLoc',
                                    actionName: 'invokeEventHandler',
                                    interactionUuid: '-J1E9u7Az',
                                    componentUuid: 'fhS8WDgavC3j',
                                  },
                                  $steps['invokePostback']
                                )
                              }
                            }}
                            platform={'nextjs'}
                            target={'_blank' as const}
                          >
                            <Button className={classNames('__wab_instance', sty.button__bbBhh)} />
                          </p.PlasmicLink>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    'root',
    'localeSelector',
    'page',
    'navigation',
    'img',
    'name',
    'main',
    'card',
    'header',
    'linguiTrans',
    'sofaIllustration',
    'columns',
    'availability',
    'discord',
    'telegram',
    'whatsapp',
    'verticalContainer',
    'expert',
    'fuss',
    'unbeatable',
    'ul',
    'actions',
  ],
  localeSelector: ['localeSelector'],
  page: [
    'page',
    'navigation',
    'img',
    'name',
    'main',
    'card',
    'header',
    'linguiTrans',
    'sofaIllustration',
    'columns',
    'availability',
    'discord',
    'telegram',
    'whatsapp',
    'verticalContainer',
    'expert',
    'fuss',
    'unbeatable',
    'ul',
    'actions',
  ],
  navigation: ['navigation', 'img', 'name'],
  img: ['img'],
  name: ['name'],
  main: [
    'main',
    'card',
    'header',
    'linguiTrans',
    'sofaIllustration',
    'columns',
    'availability',
    'discord',
    'telegram',
    'whatsapp',
    'verticalContainer',
    'expert',
    'fuss',
    'unbeatable',
    'ul',
    'actions',
  ],
  card: [
    'card',
    'header',
    'linguiTrans',
    'sofaIllustration',
    'columns',
    'availability',
    'discord',
    'telegram',
    'whatsapp',
    'verticalContainer',
    'expert',
    'fuss',
    'unbeatable',
    'ul',
    'actions',
  ],
  header: ['header', 'linguiTrans'],
  linguiTrans: ['linguiTrans'],
  sofaIllustration: ['sofaIllustration'],
  columns: [
    'columns',
    'availability',
    'discord',
    'telegram',
    'whatsapp',
    'verticalContainer',
    'expert',
    'fuss',
    'unbeatable',
    'ul',
    'actions',
  ],
  availability: ['availability', 'discord', 'telegram', 'whatsapp'],
  discord: ['discord'],
  telegram: ['telegram'],
  whatsapp: ['whatsapp'],
  verticalContainer: ['verticalContainer', 'expert', 'fuss', 'unbeatable', 'ul'],
  expert: ['expert'],
  fuss: ['fuss'],
  unbeatable: ['unbeatable', 'ul'],
  ul: ['ul'],
  actions: ['actions'],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number]
type NodeDefaultElementType = {
  root: 'div'
  localeSelector: 'a'
  page: 'div'
  navigation: 'div'
  img: typeof p.PlasmicImg
  name: 'div'
  main: 'div'
  card: 'div'
  header: 'div'
  linguiTrans: typeof Trans
  sofaIllustration: 'div'
  columns: 'div'
  availability: 'div'
  discord: 'svg'
  telegram: typeof p.PlasmicImg
  whatsapp: typeof p.PlasmicImg
  verticalContainer: 'div'
  expert: typeof MiniCard
  fuss: typeof MiniCard
  unbeatable: typeof MiniCard
  ul: 'ul'
  actions: 'div'
}

type ReservedPropsType = 'variants' | 'args' | 'overrides'
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs
    args?: PlasmicHomepage__ArgsType
    overrides?: NodeOverridesType<T>
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        }),
      [props, nodeName]
    )
    return PlasmicHomepage__RenderFunc({ variants, args, overrides, forNode: nodeName })
  }
  if (nodeName === 'root') {
    func.displayName = 'PlasmicHomepage'
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`
  }
  return func
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    localeSelector: makeNodeComponent('localeSelector'),
    page: makeNodeComponent('page'),
    navigation: makeNodeComponent('navigation'),
    img: makeNodeComponent('img'),
    _name: makeNodeComponent('name'),
    main: makeNodeComponent('main'),
    card: makeNodeComponent('card'),
    header: makeNodeComponent('header'),
    linguiTrans: makeNodeComponent('linguiTrans'),
    sofaIllustration: makeNodeComponent('sofaIllustration'),
    columns: makeNodeComponent('columns'),
    availability: makeNodeComponent('availability'),
    discord: makeNodeComponent('discord'),
    telegram: makeNodeComponent('telegram'),
    whatsapp: makeNodeComponent('whatsapp'),
    verticalContainer: makeNodeComponent('verticalContainer'),
    expert: makeNodeComponent('expert'),
    fuss: makeNodeComponent('fuss'),
    unbeatable: makeNodeComponent('unbeatable'),
    ul: makeNodeComponent('ul'),
    actions: makeNodeComponent('actions'),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: 'Kalm.chat - Overcome your challenges',
      description:
        'Get qualified help and counseling ¬†instantly¬†, directly on Whatsapp. The help you need always at your pocket. ¬†All for FREE!',
      ogImageSrc: 'https://site-assets.plasmic.app/bbaaa0f3cabf28915874792cbcdaa27a.jpg',
      canonical: 'https://kalm.chat',
    },
  }
)

export default PlasmicHomepage
/* prettier-ignore-end */
